import config
import os
import telebot
from flask import Flask, request
from telebot import types
import parser

bot = telebot.TeleBot(config.TOKEN)

kinoseti_menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
kinoseti_menu_keyboard.add(types.KeyboardButton(text='КИНОМАКС'))
kinoseti_menu_keyboard.add(types.KeyboardButton(text='КАРО'))
kinoseti_menu_keyboard.add(types.KeyboardButton(text='ФОРМУЛА КИНО / СИНЕМА ПАРК'))


@bot.message_handler(commands=['start'])
def send_start(message):
    bot.send_message(message.chat.id, "Добро пожаловать\nВыберите киносеть", parse_mode='markdown')
    bot.send_message(message.chat.id, 'КИНОМАКС\nКАРО\nФОРМУЛА КИНО / СИНЕМА ПАРК', reply_markup=kinoseti_menu_keyboard)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def get_kinoset(message):
    cinema_list_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    msg = ''
    if message.text == 'КИНОМАКС':
        cinema_data = parser.get_kinomax_cinema_list()

        for cinema in cinema_data:
            msg += '*{0}*\n{1}\n\n'.format(cinema, cinema_data[cinema][0])
            cinema_list_keyboard.add(types.KeyboardButton(text=cinema))

        bot.send_message(chat_id=message.chat.id, text="Введите кинотеатр", reply_markup=cinema_list_keyboard)
        bot.send_message(message.chat.id, msg, parse_mode='markdown')
        bot.register_next_step_handler(message, process_kinomax_cinema_select)

    elif message.text == 'КАРО':
        cinema_data = parser.get_karo_cinema_list()

        for cinema in cinema_data:
            msg += '*{0}*\n{1}\n\n'.format(cinema, cinema_data[cinema][0])
            cinema_list_keyboard.add(types.KeyboardButton(text=cinema))

        bot.send_message(chat_id=message.chat.id, text="Введите кинотеатр", reply_markup=cinema_list_keyboard)
        bot.send_message(message.chat.id, msg, parse_mode='markdown')
        bot.register_next_step_handler(message, process_karo_cinema_select)

    elif message.text == 'ФОРМУЛА КИНО / СИНЕМА ПАРК':
        cinema_data = parser.get_formulakino_cinema_list()

        for cinema in cinema_data:
            msg += '*{0}*\n{1}\n\n'.format(cinema, cinema_data[cinema][0])
            cinema_list_keyboard.add(types.KeyboardButton(text=cinema))

        bot.send_message(chat_id=message.chat.id, text="Введите кинотеатр", reply_markup=cinema_list_keyboard)
        bot.send_message(message.chat.id, msg, parse_mode='markdown')

        bot.register_next_step_handler(message, process_formulakino_cinema_select)


def process_formulakino_cinema_select(message):
    try:
        if message.text.lower() == 'назад':
            bot.send_message(message.chat.id, 'Выберите киносеть\nКИНОМАКС\nКАРО\nЛЮКСОР',
                             reply_markup=kinoseti_menu_keyboard)
            return
        else:
            data = parser.get_formulakino_cinema_list()
            if message.text in data:
                link = data[message.text][1]
                data = parser.get_formulakino_date(link)
                date_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for date in data:
                    date_keyboard.add(types.KeyboardButton(text=date))

                bot.send_message(message.chat.id, 'Выберите дату', parse_mode='markdown', reply_markup=date_keyboard)
                bot.register_next_step_handler(message, process_formulakino_date_select, link)
            else:
                msg = bot.reply_to(message, 'Кинотеатра с таким номером не существует. Введите номер заново')
                bot.register_next_step_handler(msg, process_kinomax_cinema_select)
                return

    except Exception as e:
        bot.reply_to(message, e)


def process_karo_cinema_select(message):
    try:
        if message.text.lower() == 'назад':
            bot.send_message(message.chat.id, 'Выберите киносеть\nКИНОМАКС\nКАРО\nЛЮКСОР',
                             reply_markup=kinoseti_menu_keyboard)
            return
        else:
            data = parser.get_karo_cinema_list()
            if message.text in data:
                link = data[message.text][1]
                data = parser.get_karo_date(link)
                date_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for date in data:
                    date_keyboard.add(types.KeyboardButton(text=date))

                bot.send_message(message.chat.id, 'Выберите дату', parse_mode='markdown', reply_markup=date_keyboard)
                bot.register_next_step_handler(message, process_karo_date_select, link)
            else:
                msg = bot.reply_to(message, 'Кинотеатра с таким номером не существует. Введите номер заново')
                bot.register_next_step_handler(msg, process_karo_cinema_select)
                return
    except Exception as e:
        bot.reply_to(message, e)


def process_kinomax_cinema_select(message):
    try:
        if message.text.lower() == 'назад':
            bot.send_message(message.chat.id, 'Выберите киносеть\nКИНОМАКС\nКАРО\nЛЮКСОР',
                             reply_markup=kinoseti_menu_keyboard)
            return
        else:
            data = parser.get_kinomax_cinema_list()
            if message.text in data:
                link = data[message.text][1]
                data = parser.get_kinomax_date(link)
                date_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for date in data:
                    date_keyboard.add(types.KeyboardButton(text=date))

                bot.send_message(message.chat.id, 'Выберите дату', parse_mode='markdown', reply_markup=date_keyboard)
                bot.register_next_step_handler(message, process_kinomax_date_select, link)
            else:
                msg = bot.reply_to(message, 'Кинотеатра с таким номером не существует. Введите номер заново')
                bot.register_next_step_handler(msg, process_kinomax_cinema_select)
                return

    except Exception as e:
        bot.reply_to(message, e)


def process_formulakino_date_select(message, link):
    try:
        if message.text.lower() == 'назад':
            bot.send_message(message.chat.id, 'Выберите киносеть\nКИНОМАКС\nКАРО\nЛЮКСОР',
                             reply_markup=kinoseti_menu_keyboard)
            return
        else:
            date_list = parser.get_formulakino_date(link)

            if message.text in date_list:
                msg = parser.get_formulakino_cinema_afisha(date_list[message.text])
                bot.send_message(message.chat.id, msg, reply_markup=kinoseti_menu_keyboard, parse_mode='markdown')
    except Exception as e:
        bot.reply_to(message, e)


def process_karo_date_select(message, link):
    try:
        if message.text.lower() == 'назад':
            bot.send_message(message.chat.id, 'Выберите киносеть\nКИНОМАКС\nКАРО\nЛЮКСОР',
                             reply_markup=kinoseti_menu_keyboard)
            return
        else:
            date_list = parser.get_karo_date(link)
            if message.text in date_list:
                msg = parser.get_karo_cinema_afisha('https://karofilm.ru' + date_list[message.text])
                bot.send_message(message.chat.id, msg, reply_markup=kinoseti_menu_keyboard, parse_mode='markdown')
    except Exception as e:
        bot.reply_to(message, e)


def process_kinomax_date_select(message, link):
    try:
        if message.text.lower() == 'назад':
            bot.send_message(message.chat.id, 'Выберите киносеть\nКИНОМАКС\nКАРО\nЛЮКСОР',
                             reply_markup=kinoseti_menu_keyboard)
            return
        else:
            date_list = parser.get_kinomax_date(link)
            if message.text in date_list:
                msg = parser.get_kinomax_cinema_afisha(link + '?date=' + date_list[message.text])
                bot.send_message(message.chat.id, msg, reply_markup=kinoseti_menu_keyboard, parse_mode='markdown')
    except Exception as e:
        bot.reply_to(message, e)


if "HEROKU" in list(os.environ.keys()):
    server = Flask(__name__)


    @server.route('/' + config.TOKEN, methods=['POST'])
    def getMessage():
        bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
        return "!", 200


    @server.route("/")
    def webhook():
        bot.remove_webhook()
        bot.set_webhook(url=config.HEROKU_URL + config.TOKEN)
        return "!", 200


    server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))

else:
    bot.remove_webhook()
    bot.polling(none_stop=True)
